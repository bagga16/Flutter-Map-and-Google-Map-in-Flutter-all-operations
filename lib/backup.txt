import 'dart:async';
import 'dart:collection';

import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:flutter_map_heatmap/flutter_map_heatmap.dart';
import 'package:latlong2/latlong.dart';

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  StreamController<void> _rebuildStream = StreamController.broadcast();
  List<WeightedLatLng> data = [];
  List<Map<double, MaterialColor>> gradients = [
    HeatMapOptions.defaultGradient,
    // {0.25: Colors.blue, 0.55: Colors.red, 0.85: Colors.pink, 1.0: Colors.purple}
  ];

  var index = 1;

  @override
  void initState() {
    _loadData();
    super.initState();
  }

  @override
  void dispose() {
    _rebuildStream.close();
    super.dispose();
  }

  _loadData() {
    List<MapEntry<LatLng, double>> result = [
      MapEntry(LatLng(28.430300, 70.300885), 1),
      MapEntry(LatLng(28.418790, 70.329942), 1),
      MapEntry(LatLng(28.388559, 70.361828), 1),
      MapEntry(LatLng(28.425469, 70.299081), 1),
      MapEntry(LatLng(28.483621, 70.346547), 1),
      MapEntry(LatLng(28.305271, 70.2906253), 1),
      MapEntry(LatLng(28.423398, 70.259503), 5),
      MapEntry(LatLng(28.418222, 70.278912), 5),
    ];

    List<LatLng> points = result.map((entry) {
      return LatLng(entry.key.latitude, entry.key.longitude);
    }).toList();

    List<double> weights = result.map((entry) {
      return entry.value;
    }).toList();

    if (points.isNotEmpty) {
      data = List.generate(points.length, (index) {
        return WeightedLatLng(points[index], weights[index]);
      });
    }
  }

  Set<Polygon> _polygons = HashSet<Polygon>();

  List<Marker> markers = [];

  void addMarker(LatLng position, String imageUrl) {
    markers.add(Marker(
      width: 40.0,
      height: 40.0,
      point: position,
      builder: (context) => Image.network(
        imageUrl,
        width: 40.0,
        height: 40.0,
        color: Colors.red,
      ),
    ));

    setState(() {
      markers = [...markers];
    });
  }

  void createPolygonFromMarkers() {
    List<LatLng> polygonPoints = markers.map((marker) {
      return marker.point;
    }).toList();

    setState(() {
      _polygons.clear();
      if (polygonPoints.isNotEmpty) {
        _polygons.add(Polygon(
          points: polygonPoints,
          isDotted: true,
          rotateLabel: true,
          borderColor: Colors.black,
          borderStrokeWidth: 3,
        ));
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      _rebuildStream.add(null);
    });

    return Scaffold(
      body: Center(
        child: Container(
          height: MediaQuery.of(context).size.height,
          width: MediaQuery.of(context).size.width,
          child: FlutterMap(
            options: MapOptions(
              onTap: (tapPosition, point) {
                addMarker(
                  point,
                  'https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_92x30dp.png',
                );
              },
              center: LatLng(28.423398, 70.259503),
              zoom: 12.0,
            ),
            children: [
              TileLayer(
                urlTemplate:
                    "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                subdomains: ['a', 'b', 'c'],
              ),
              if (data.isNotEmpty)
                HeatMapLayer(
                  heatMapDataSource: InMemoryHeatMapDataSource(data: data),
                  heatMapOptions: HeatMapOptions(
                    radius: 70,
                    blurFactor: 0.5,
                    layerOpacity: 0.75,
                    gradient: {
                      0.20: Colors.blue,
                      0.30: Colors.red,
                      0.50: Colors.yellow,
                    },
                    minOpacity: 0.1,
                  ),
                ),
              MarkerLayer(
                markers: markers,
              ),
              PolygonLayer(
                polygons: _polygons.toList(),
              ),
            ],
          ),
        ),
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          FloatingActionButton(
            onPressed: () {
              createPolygonFromMarkers();
            },
            tooltip: 'Create Polygon',
            child: Icon(Icons.add_location),
          ),
          SizedBox(height: 13.0),
          FloatingActionButton(
            onPressed: () {
              setState(() {
                _polygons.clear();
                markers.clear();
              });
            },
            tooltip: 'Add Marker',
            child: Icon(Icons.delete),
          ),
        ],
      ),
    );
  }
}















import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyMapScreen(),
    );
  }
}

class MyMapScreen extends StatefulWidget {
  @override
  _MyMapScreenState createState() => _MyMapScreenState();
}

class _MyMapScreenState extends State<MyMapScreen> {
  List<LatLng> polylinePoints = [
    LatLng(28.403398, 70.259503),
    LatLng(28.423398, 70.259503),
    LatLng(28.448181, 70.282196),
    LatLng(28.443724, 70.287239),
    LatLng(28.453724, 70.297239),
    // Add more points as needed
  ];

  List<LatLng> routePoints = [];

  get http => null;

  @override
  void initState() {
    super.initState();
    _fetchRoute();
  }

  Future<void> _fetchRoute() async {
    for (int i = 0; i < polylinePoints.length - 1; i++) {
      List<LatLng> points = await _getRouteBetweenPoints(
        polylinePoints[i],
        polylinePoints[i + 1],
      );

      if (points.isNotEmpty) {
        routePoints.addAll(points);
      }
    }
    setState(() {});
  }

  Future<List<LatLng>> _getRouteBetweenPoints(
      LatLng point1, LatLng point2) async {
    final response = await http.get(
      Uri.parse(
        'http://router.project-osrm.org/route/v1/driving/${point1.longitude},${point1.latitude};${point2.longitude},${point2.latitude}?overview=full&steps=true&geometries=geojson',
      ),
    );

    if (response.statusCode == 200) {
      final decoded = json.decode(response.body);
      final List<dynamic> routes = decoded['routes'];

      if (routes.isNotEmpty) {
        final geometry = routes[0]['geometry']['coordinates'];
        return geometry.map<LatLng>((coord) {
          return LatLng(coord[1], coord[0]);
        }).toList();
      }
    }

    return [];
  }

  late GoogleMapController mapController;
  Set<Marker> markers = {};
  Set<Polygon> polygons = {};
  Set<Polyline> polylines = {};

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GoogleMap(
        onMapCreated: (GoogleMapController controller) {
          mapController = controller;
        },
        onTap: _addMarker,
        initialCameraPosition: CameraPosition(
          target: LatLng(28.423398, 70.259503),
          zoom: 12.0,
        ),
        markers: markers,
        polygons: polygons,
        polylines: polylines,
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton(
            onPressed: () {
              _createPolygon();
            },
            tooltip: 'Create Polygon',
            child: Icon(Icons.add_location),
          ),
          SizedBox(height: 13.0),
          FloatingActionButton(
            onPressed: () {
              _createPolyline();
            },
            tooltip: 'Create Polyline',
            child: Icon(Icons.timeline),
          ),
          SizedBox(height: 13.0),
          FloatingActionButton(
            onPressed: () {
              setState(() {
                markers.clear();
                polygons.clear();
                polylines.clear();
              });
            },
            tooltip: 'Clear Markers, Polygon, and Polyline',
            child: Icon(Icons.delete),
          ),
        ],
      ),
    );
  }

  void _addMarker(LatLng tappedPoint) {
    setState(() {
      markers.add(
        Marker(
          markerId: MarkerId(tappedPoint.toString()),
          position: tappedPoint,
          infoWindow: InfoWindow(
            title: 'Marker',
            snippet: 'User added marker',
          ),
        ),
      );
    });
  }

  void _createPolygon() {
    if (markers.length < 3) {
      // Need at least 3 markers to create a polygon
      return;
    }

    List<LatLng> polygonPoints = markers.map((marker) {
      return marker.position!;
    }).toList();

    setState(() {
      polygons.add(
        Polygon(
          polygonId: PolygonId('polygon_id'),
          points: polygonPoints,
          strokeWidth: 3,
          strokeColor: Colors.black,
          fillColor: Colors.transparent,
        ),
      );
    });
  }

  void _createPolyline() {
    if (polylinePoints.length < 2) {
      // Need at least 2 points to create a polyline
      return;
    }

    setState(() {
      polylines.add(
        Polyline(
          polylineId: PolylineId('polyline_id'),
          points: polylinePoints,
          color: Colors.blue,
          width: 3,
        ),
      );
    });
  }
}
